010
initialize server folder 
>npm init -y
express is for build the server 
mongoose is to intract with the mongodb
cors :here client and server can communicate with each other,they will run in different origin,cors will avoid any error for communicating with two different origin
dotenv is for environment variable setup
nodemon will notice each and every changes in the code and rerun the server with each changes
esm is for import export syntax
jsonwebtoken will creating the token and that will be exchanged between our client and server,user for authentication
bcrypt is used to hash the password
morgan it will show the endpoints we are getting the request,it will helpfull to debug the application.it will console.endpoint , the method used for that endpoint and its status code so that the debugging process will be eahy
create server.js ,it be the entry point to the server
add script tag in package.json
"scripts": {
    "start":"nodemon -r esm server.js"
  },
>npm start

011
const app = express();
create an express and let put it in a variable,if we execute the express function ,then that will availabel in the app variable
middleware ,some code which will run before any response is sent back to our client.before the response is sent in between ,as soon as we get the request we might need to do some work so that time we can execute the middleware function
anytime we want to apply middleware ,we will use the 'use' funtion that is availabel with express
app.use(cors());
this will allow to pass json data
app.use(express.json());
app.get('/,()=>{})
when we get request to the endpoint '/' we want to sent some response,the get method have two parameter 
express is a request response handler
app.use() requires a middleware function
app.use(console.log('this is my own middleware'));

import express from 'express'
import cors from 'cors'
// const morgan =require('morgan');
import morgan from 'morgan';
require('dotenv').config();

// create express app
const app = express();

// apply middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));
// user defined middleware
// app.use(console.log('this is my own middleware'));,give error app.use() require a middleware function
// if we not provide req,res,next then it will stop the whole execution
app.use((req,res,next) => {
    console.log('this is my own middleware')
    next();//for continueing the execution
});

// route
app.get('/',(req,res)=>{
    res.send('you hit server endpoint');
});

// port
const port = process.env.PORT || 8000;
// listen will help us to listen to the running server
app.listen(port,()=>console.log(`server is running on port ${port}`));
// console.log('server set up')

012
create route/auth.js

import express  from 'express';
const router = express.Router();
router.get('/register',(req,res)=>{
    res.send('Register User')
});
module.exports=router;

import express from 'express'
import cors from 'cors'
// const morgan =require('morgan');
import morgan from 'morgan';
require('dotenv').config();
// for auto load routes,const {readdirSync} = require('fs);//destructuring
const fs = require('fs');
// create express app
const app = express();

// apply middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));
// user defined middleware
// app.use(console.log('this is my own middleware'));,give error app.use() require a middleware function
// if we not provide req,res,next then it will stop the whole execution
app.use((req,res,next) => {
    console.log('this is my own middleware')
    next();//for continueing the execution
});

// route
// after destructe readdirSync('./routes')
fs.readdirSync('./routes').map((r)=>{
   app.use('/api',require(`./routes/${r}`))
})
app.get('/',(req,res)=>{
    res.send('you hit server endpoint');
});

// port
const port = process.env.PORT || 8000;
// listen will help us to listen to the running server
app.listen(port,()=>console.log(`server is running on port ${port}`));
// console.log('server set up')

013
create controller/auth.js

export const register=(req, res) => {
    res.send('Register User ffff');
};

import this in routes/auth.js

import express  from 'express';
import { register } from '../controllers/auth';
const router = express.Router();

router.get('/register',register);
module.exports=router;

014
use mongo atlas or install mongodb
any time we make any change in env file,we must restart the server
add mongodb connection string in .env file
PORT=5000
DATABASE=mongodb://localhost:27017/wings

015
//import mongoose in server.js
import mongoose from 'mongoose';
//old mongoose connection
mongoose.connect(process.env.DATABASE,{
    userNewUrlParser:true,
    useFindAndModify:false,
    useUnifiedTopology:true,
    useCreateIndex:true,
});
//new one
mongoose
  .connect(process.env.DATABASE, {})
  .then(() => console.log("DB connected"))
  .catch((err) => console.log("DB Error => ", err));


017
axios is a http library,so that we can make a post request and send this information to the backend so that we can save in the database 
install axios in client
>npm i axios
import axios in client/pages/register.js
const handleSubmit =async (e) => {
        // call when submit the event
        // prevent the page reloading when the page is submitted
        e.preventDefault();
        console.table({name,email,password})
        // send the data to backend
        const {data} =await axios.post(`http://localhost:8000/api/register`{name,email,password});
    };
note that the /api/register must be a post request in backend
app.use(express.json()) middleware is must for getting json data in backend,otherwise we cannot access to req.body
check network ,payload for verify send it or not

export const register=(req, res) => {
    console.log(req.body);
    res.json('Register User ffff');
    //res.send('Register User ffff');
};

018
by using scema we can decide which field is saved to the database.with scemas we can create database models,that will interact with the database 
create server/models/user.js

