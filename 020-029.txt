020
const bcrypt = require('bcrypt');
exports.hashPassword =(password)=>{
    return new Promise((resolve,reject)=>{
        bcrypt.genSalt(12,(err,salt)=>{
            if(err){
                reject(err);
            }
            bcrypt.hash(password,salt,(err,hash)=>{
                if(err){
                    reject(err);
                }
                resolve(hash);
            });
        });
    });
    
}
exports.comparePassword = (password, hashed) => {
    return bcrypt.compare(password, hashed);
};
const User = require('../models/user');
const { hashPassword, comparePassword } = require('../Utils/auth');

exports.register = async (req, res) => {
    try {
        // console.log(req.body);
        const { name, email, password } = req.body;
        //validation
        if (!name) return res.status(400).send('Name is required');
        if (!password || password.length < 6) {
            return res
                .status(400)
                .send(
                    'password is required and should be min 6 charecter long'
                );
        }
        let userExist = await User.findOne({ email }).exec();
        if (userExist) return res.status(400).send('Email is taken');
        //hash password
        const hashedPassword = await hashPassword(password);
        //register
        const user = new User({
            name,
            email,
            password: hashedPassword,
        });
        await user.save();
        console.log('saved user', user);
        return res.json({ ok: true });
    } catch (err) {
        console.error(err);
        return res.status(400).send('Error,Try again.');
    }
    // console.log(req.body);
    // res.json('Register User ffff');
    //res.send('Register User ffff');
};

021
install toastify package in client side
npm i react-toastify
import {ToastContainer} from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
<ToastContainer position='top-center'/>

toast.success('message');
toast.error(err.response.data);
toast('plain message');

022
import { SyncOutlined } from '@ant-design/icons';
const [loading,setLoading] = useState(false);
set it to true when we submit the form and set to false when the toggle popup,and in errror
<button className="btn btn-block btn-primary"  type="submit"   disabled={!name 
|| !email || !password || loading}>{loading ? <SyncOutlined spin /> : 'Submit'}</button>

023
create .env.local in client,for avoiding clash
no need to seperate install the package dotenv,if it in server that will access with client

024
setup custom next js server
this is required in the development mode because we want to use cookie based authentication system.so we will still be communication with our backend and frondend using the json web token.here in this project we are not going to save the token in local storage.which is not a perfect solution.because it can be accessed in the client side using js.so for that reson to implement secure login system we are going to use cookie based authentication system.so we need to have client and server running in the same domain,so that the cookies work.cookies are something that browser will send automatically to the issuing server.
The cookies are send in the headers by default,that why it is work with same domain/origin
server when it issued the token ,it will issue as http only cookies and with that our server has full control over the cookies.so server will send to the cliend and this cliend will send that cookies every time any request is made back to the server,in that way it will fully seccure
we need to use proxy for setting cookies.it is only for development mode

to use cookies based auth system we need have both client and server running on same origin/domain
we need to use proxy for that because our client/nextjs is running on 3000


use proxy in next  js 
to use poxy we need to create custom server
this is only for development mode
in production,we will use same origin/domain so we don't have to worry about it 
we can simply run build then start next app


install http-proxy-middleware,express in client folder
create custom express server
client/server.js

const express=require('express');
const next = require('next');
const {createProxyMiddleware} = require('http-proxy-middleware')
// check production  or development envireonment
const dev = process.env.NODE_ENV!=='production';
//create next application
const app = next({dev});
const handle = app.getRequestHandler();
app.prepare().then(()=>{
    const server =express();
    //apply proxy in dev mode,use express
    if(dev){
        //prefix the backend routeh  with /api and  that will send reuqest to our backend
server.use('/api',createProxyMiddleware({target:'http://localhost:8000',changeOrigin:true,})
        )
    }
    server.all("*",(req,res)=>{
        return handle(req,res);
    });
    server.listen(3000,(err)=>{
        if(err) throw err;
        console.log('>Ready on http://localhost:5000');
    })
}).catch((err)=>{
    console.log('Error',err);
});

change  in register.js 
/api

change it in package.json
"dev": "node server.js",

025
register.js
import Link from 'next/link';
<p className="text-center p-3">
                    Already Registered{' '}
                    <Link href="/login" legacyBehavior>
                        <a>Login</a>
                    </Link>
                </p>


active link when we on a page.we on login page ,login icon is in different color 
TopNav.js
import usestate and useEffect
const [current,setCurrent]=useState('');

set key and onclick on each item
<Menu mode="horizontal" selectedKeys={[current]}>
<Item key="/" onClick={(e) => setCurrent(e.key)}  icon={<AppstoreAddOutlined />}>{/* in react <Link to="/"></Link> */} <Link href="/" legacyBehavior><a>App</a></Link>

use useEffect 
useEffect(() => {
        //window.location.pathname give the url
        //ensure it is in browser
        typeof window !== 'undefined' && setCurrent(window.location.pathname);
    }, [typeof window !== 'undefined' && window.location.pathname]);

    